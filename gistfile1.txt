(defn canvas [xs]
	(let [f (JFrame.)
				c (proxy [Canvas] []
			(update [g]
				(doto g (.clearRect 0 0 300 300))
				(doseq [x @xs] (. g fillRect x 100 10 10))))]
        (. f setSize 300 300)
	(. f add c)
	(. f setVisible true)
	c))


;; Looping with State:
; ('n' should be set by the frame, or some such...)
(defn incr [xs f n]
	(reset! xs (map #(+ 1 %1) @xs))
	(println @xs)
	(reset! n (- @n 1))
	(when (> @n 0) (recur xs f n)))

;; Getting into Rules

(defn in-range [p]
	(let [x (first p) y (last p)]
		(and (>= x 0) (>= y 0) (< x 301) (< x 301))))

 (defn neighbors [p]
	(let [x (first p) x_1 (- x 1) x1 (+ x 1)
		y (last p) y_1 (- y 1) y1 (+ y 1)]
	(filter in-range 
		#{[x_1 y_1] [x_1 y] [x_1 y1] [x y_1] [x y1] [x1 y_1] [x1 y] [x1 y1]})))


(defn should-live [p world]
	(= 3 (count (clojure.set/intersection world (neighbors p)))))

